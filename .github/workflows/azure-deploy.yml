name: Deploy to Azure Web App

on:
  workflow_dispatch:
  # Push trigger comentado para evitar deploy automático no primeiro commit
  # Descomente as linhas abaixo se quiser deploy automático em futuros pushes:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Detect project structure and build
        run: |
          # Check if it's a monorepo with frontend/backend
          if [ -d "frontend" ] && [ -d "backend" ]; then
            echo "Detected frontend/backend structure"
            
            # Build frontend
            if [ -f "frontend/package.json" ]; then
              echo "Building frontend..."
              cd frontend
              npm install
              npm run build --if-present
              cd ..
            fi
            
            # Build backend
            if [ -f "backend/package.json" ]; then
              echo "Building backend..."
              cd backend
              npm install
              npm run build --if-present
              cd ..
            fi
            
            # Copy frontend build to backend public folder
            if [ -d "frontend/dist" ] || [ -d "frontend/build" ]; then
              echo "Copying frontend build to backend..."
              mkdir -p backend/public
              cp -r frontend/dist/* backend/public/ 2>/dev/null || cp -r frontend/build/* backend/public/ 2>/dev/null || true
            fi
            
            # Create Azure configuration files using Node.js
            echo "Creating Azure configuration files..."
            node -e "
              const fs = require('fs');
              const path = require('path');
              
              // Create web.config
              const webConfig = '<?xml version="1.0" encoding="utf-8"?>\n' +
                '<configuration>\n' +
                '  <system.webServer>\n' +
                '    <webSocket enabled="false" />\n' +
                '    <handlers>\n' +
                '      <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>\n' +
                '    </handlers>\n' +
                '    <rewrite>\n' +
                '      <rules>\n' +
                '        <rule name="StaticContent">\n' +
                '          <action type="Rewrite" url="public{REQUEST_URI}"/>\n' +
                '        </rule>\n' +
                '        <rule name="DynamicContent">\n' +
                '          <conditions>\n' +
                '            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>\n' +
                '          </conditions>\n' +
                '          <action type="Rewrite" url="server.js"/>\n' +
                '        </rule>\n' +
                '      </rules>\n' +
                '    </rewrite>\n' +
                '    <httpErrors existingResponse="PassThrough" />\n' +
                '  </system.webServer>\n' +
                '</configuration>';
              
              fs.writeFileSync('backend/web.config', webConfig);
              console.log('web.config created');
              
              // Ensure package.json has start script
              const pkgPath = 'backend/package.json';
              if (fs.existsSync(pkgPath)) {
                const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
                pkg.scripts = pkg.scripts || {};
                if (!pkg.scripts.start) {
                  pkg.scripts.start = 'node server.js';
                  fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
                  console.log('Added start script to package.json');
                }
              }
            "
            
            # Package backend for deployment
            cd backend
          elif [ -f "package.json" ]; then
            # Single project structure
            echo "Detected single project structure"
            npm install
            npm run build --if-present
            npm run test --if-present -- --passWithNoTests
          else
            echo "No package.json found in expected locations"
            exit 1
          fi

      - name: Zip artifact for deployment
        run: |
          # Check if we have frontend/backend structure
          if [ -d "backend" ]; then
            echo "Creating deployment package from backend folder"
            cd backend
            zip -r ../release.zip . -x "node_modules/*" ".git/*"
          else
            echo "Creating deployment package from root"
            zip -r release.zip . -x "node_modules/*" ".git/*"
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'expandev-02'
          package: .
          startup-command: 'npm start'